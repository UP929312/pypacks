[tool.poetry]
name = "pypacks"
description = "A package used to generate Minecraft datapacks using Python code"
authors = ["Skezza"]
version = "0.0.1"
license = "Proprietary"
readme = "README.md"
packages = [{include = "pypacks"}]

[tool.poetry.scripts]
pypacks = "pypacks.__main__:main"

[tool.poetry.dependencies]
python = "^3.10"
requests = "^2.26.0"

[tool.poetry.group.dev.dependencies]
black = "^23.1.0"
pylint = "^2.17.5"

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
plugins = ["pydantic.mypy"]
exclude = [".vscode", ".mypy_cache", ".git", "__pycache__", "examples/item_components", "examples/raycasting", "examples/tests"]
strict = true

[tool.pylint.main]
ignore = [".vscode", ".mypy_cache", ".git", "__pycache__"]
recursive = true

[tool.pylint.messages_control]
max-line-length = 140
disable = [
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",

    "too-few-public-methods",
    "too-many-instance-attributes",
    "too-many-arguments",

    "wrong-import-position",
    "duplicate-code",
    "unused-argument",
    "fixme",
    "arguments-differ",
    "arguments-renamed",
    "invalid-name",
    "too-many-locals",
    "line-too-long",
    "broad-exception-caught",
    "import-outside-toplevel",
    "attribute-defined-outside-init",
    "cyclic-import",
    "redefined-outer-name",
    "abstract-method",
    "pointless-statement",
    "inconsistent-return-statements",
    "wrong-import-order",
    "wildcard-import",
    "unused-wildcard-import",
    "unnecessary-lambda",
]

[tool.black]
line_length = 140

[tool.isort]
profile = "black"

[tool.coverage.run]
omit = [
    "__pycache__/*",
    ".mypy_cache/*",
    ".pytest_cache/*",
    ".ruff_cache/*",
    ".vscode/*",
    "dist/*",
    "htmlcov/*",
    "tests/*",
    "/opt/*",
]

[tool.bandit]
skips = ["B101", "B105", "B106", "B107"]  # SQL Injection, assert x3

[tool.ruff]
line-length = 140

[tool.ruff.format]
quote-style = "double"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle
    "F",  # Pyflakes
    "UP",  # pyupgrade
    "B",  # flake8-bugbear
    "SIM",  # flake8-simplify
    "I",  # isort
]
ignore = ["F401", "F403", "E501", "I001", "SIM105", "SIM118"]