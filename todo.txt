List:
- Custom blocks - Slab experiments (80% done)
- Custom blocks, no drops in creative
- Custom blocks, silk touch

on_right_click should also take a MCFunction object, and get it's reference...

Consider changing components to be a list of components, rather than a big ol' class.

Filled barrel, decorated pot don't have icons

Use requests to get the data in scripts/default_json

Dyed helmet icon is horror...

# Problems with slabs
- Z fighting
- Placing upper/double slabs is a problem...

For slabs and stairs and such, maybe just have "children" of the block, then we can store it in the block, the ref book can reference that
and also it can be created more easily, then the add_slab code will be adding it to the children

Add a "generic" model, including maybe blockstates, model, item, textures? So if you want to add a custom 3d model you can?

Placing slabs through other slabs causes issues, hopefully it's rare though? Since the raycast doesn't check if it's already
In a custom slab.

A lot of examples, maybe one per item? In a new examples folder.

With the ray casting, what if they have a higher `block_interaction_range`?

When placing custom blocks vertically, don't rotate them also, check if they're vertically rotatable and if they're vertical

# Dynamic border generation, would need to scale, somehow, to any size from 20x20->300x300

# With crafting recipes, be able to put CustomItems in, currently just supports strings.
This works for outputs, but I'm not sure about inputs... NOT POSSIBLE... Custom crafter???
# Floor crafting? https://new.reddit.com/r/MinecraftCommands/comments/1clflkh/wiki_update_do_custom_crafting_with_nbt/
# Custom crafter and floor crafting would be nice to do...

# For custom blocks, only drop their drop if they're not in creative (maybe cheat and just find the closest player?)
# Silk touch for custom blocks

They should appear in the reference book under the item page though...

# Change datapack init to take custom_content: list[a, b, c]
# Make datapack just take "custom content" and filter using isinstance?

# Analytics, python version, what custom content they added, etc - would be super useful with knowing where to focus development.

# What happens if they have more than 18 songs or paintings?

# In the future, for custom inventories/block entities, do
setblock ~ ~ ~ minecraft:chest{"CustomName": "text": "inv name"}
# execute align xyz positioned ~.5 ~-1 ~.5 run summon minecraft:interaction ~ ~ ~ {width: 1.002f, height: 1.002f, response: 1}

# Easy to use commands to give the items outright: /loot give @s loot umultitool:<material>_<tool> (example: /loot give @s loot umultitool:netherite_paxeloe)
# Probably won't do because the give command, but what if we had a loot table setup for all blocks,
# Then we can use that for block drops or for the give command (could just call it?) Or custom blocks?

# For recipe images, also add the ingredients underneath, like "sticks: x1, diamonds: x2"

# Calling __str__ on an item returns it's base item? Then we can just do str(item) rather than item.base_item if isisntance(item, CustomItem) else item

REFERENCE BOOK OPTIMISER, go through each page, and each element, and if its setting the same info, e.g. underline=True, underline=True,
> REMOVE IT

# Move all the internal functions and textures into an "internal" subdir, e.g. functions/internal, textures/internal, etc

Custom block stairs, slabs? What if we have a function which creates them all from a base block? CustomBlock.add_variant(stairs=True, slabs=True, fence=True, etc)
{
  "parent": "minecraft:block/stairs",
  "textures": {
    "bottom": "minecraft:block/acacia_planks",
    "side": "minecraft:block/acacia_planks",
    "top": "minecraft:block/acacia_planks"
  }
}

Loot table progress

# Naturally occuring ore veins! Would be maybe tricky...

# Merge on_load with an inputted one... Using /function

# Hud overlay would be cool! Something about the pack?

# Descriptors for integers & type validation? Probably just use Pydantic... Maybe just asserts?

interaction entity for detecting right click on blocks! If we ever add custom invs | Problem is they can't break the block anymore...

# Advancements (One for loading the datapack for the first time)
For an "install" stuff, just give them an achievement and don't revoke!

# Make some part of the logo clickable would be fun. Maybe a link to the project?

# Signs with data, maybe even Command()?

# INFO: Paintings require a world reset

# Improve testing setup, it's a nice start though. (also, add loot table stuff, should spawn the item, then detect it in the hopper below?)

# JUKEBOX SONGS - Auto Length is messed up... Hmmmm

# Debug book with all the sounds? Could be fun, and helpful, sounds, fonts, paintings, etc.
"Play sound" button in the book, with a list of all the sounds, and a play button next to them.

# Somehow detect if you're trying to enchant an item with something that doesn't make sense, e.g. a sword with silk touch, etc.

# ▙ is fun for stairs, ▄▄ for slab
# ► ▶  ➙ ➛ 	➜ ➝ ➞ ➟ ➠ ➡ ➢ ➣ ➤ ➥ ➦ ➨ ➩ ➪ ➫ ➬ ➭ ➮ ➯ ➱ ➲ ➳ ➴ ➵ ➶ ➷ ➸ ➹ ➺ ➻ ➼ ➽ ➾ 

# For the ref book, have a 2nd row of invisible icons so the buttons and hover work well

python -m pip install -e .

# Maybe load in all the regular tags and stuff, sort of like how he pre-makes all the item attributes
# Maybe we should pre-populate all the default items, like swords and stuff, so you can base stuff of them?

# Make the default texture path point to some default texture we provide? For the datapack? Rather than the default mc one

# For things that are edible, add some lore? Same with equipable? "Can be used as a Glider", etc?

# § -> &a - Kinda

Added minecraft:extended_view boolean property
Returns true if player has requested extended details by holding shift key down (maybe only if they're not in the inventory?)
Note: not a keybind, can't be rebound
Only works when item is displayed in UI  - Better text on shift!

# https://www.reddit.com/r/mcresourcepack/comments/wpcg0a/hi_i_want_to_learn_what_does_the_ascent_and_chars/

Automatic animal breeding

A tag for all non-right-clickable items, like bow, where we can't add right-click functionality

# Like the survival tweaks, would be nice if we could tweak the original items.
The python code for that datapack would be so clean... We'd need to recreate every vanilla item/tool first, maybe do it anyway?
